function getHTTPObject()
{
   if (window.ActiveXObject)
        return new ActiveXObject("Microsoft.XMLHTTP");
   else if (window.XMLHttpRequest)
        return new XMLHttpRequest();
   else {
      alert("Your browser does not support AJAX.");
      return null;
   }
}

function ShowHide(layer_ref)
{ 
	state = document.getElementById("save_state").value; 

	if (state == 'block')
		state = 'none'; 
	else
		state = 'block'; 

	alert(state);

	document.getElementById("save_state").value=state; 

/*
	if (document.all) { //IS IE 4 or 5 (or 6 beta) 
		eval( "document.all." + layer_ref + ".style.display = state"); 
	} 
	if (document.layers) { //IS NETSCAPE 4 or below 
		document.layers[layer_ref].display = state; 
	} 
	if (document.getElementById &&!document.all) { 
*/

		hza = document.getElementById(layer_ref); 
		hza.style.display = state; 
	//} 
} 



function doWork()
{
        httpObject = getHTTPObject();
    if (httpObject != null)
 {        httpObject.open("GET", "upperCase.php?inputText=" +document.getElementById('inputText').value, true);
        httpObject.send(null);
         httpObject.onreadystatechange = setOutput;
    }
}

function setOutput()
{
    if(httpObject.readyState == 4)
	{
        document.getElementById('outputText').value = httpObject.responseText;
    }
}

var httpObject = null;

function checkinv(formId, cName) {
    for (i=0,n=formId.elements.length;i<n;i++)
        if (formId.elements[i].className.indexOf(cName) !=-1)
            if (formId.elements[i].checked == true)
				formId.elements[i].checked = false;
			else
				formId.elements[i].checked = true;

}

function SaveScrollXY() {

    document.myform.ScrollX.value = document.body.scrollLeft;
    document.myform.ScrollY.value = document.body.scrollTop;
}

function ResetScrollPosition() {
	var hidx, hidy;
	hidx = document.myform.ScrollX;
	hidy = document.myform.ScrollY;
	if (typeof hidx != 'undefined' && typeof hidy != 'undefined') {
	  self.scrollTo(hidx.value, hidy.value);

	}
}


function bigcheck(id)
{
	if (document.getElementById(id).checked ==true)
		document.getElementById(id).checked=false;
	else
		document.getElementById(id).checked=true;
	
	event.returnValue=false;
	return false;
}

function submitRating(evt)
{
	var tmp = evt.target.getAttribute('id').substr(5);
	var widgetId = tmp.substr(0, tmp.indexOf('_'));
	var starNbr = tmp.substr(tmp.indexOf('_')+1);
	$.get("?action=vote",
	   { romid: widgetId, value: starNbr},
	   function(data){
		 //alert(data);
		 data++;
		 for(sn = 0 ; sn < NUMBER_OF_STARS ; sn++)
		 {
		    if (data >= 1)
			{
				document.getElementById('star_'+widgetId + '_' + sn).className = 'on';
				data --;
				continue;
			}
			if (data >= 0.5)
			{
				document.getElementById('star_'+widgetId + '_' + sn).className = 'half';
				data = 0;
				continue;
			}
			document.getElementById('star_'+widgetId + '_' + sn).className = 'off';
			
		 }
		 displayNormal(widgetId, NUMBER_OF_STARS);
	   }
	 );
}

function jqueryInit()
{
	init_rating();
	$('div.rating/img').bind('click', submitRating);
}


function remove(id)
{
	var d = document.getElementById('roms');
	var olddiv = document.getElementById(id);

//	var myElement = document.createElement("<div id=div_580 class='img'><a href='?action=details&userid=1&romid=580' ><img src='?action=getimg&blobid=4808' width=137 height=200 alt='Click for details'\></a><div class='desc'>42 All-Time Classics</div><div class='rom'>EUR </div><div class='rom' onclick='quickadd(580);return false;' ><a href='void(0)'>Add</a></div><div class='rating' id='rating_580'>3.5</div></div>");
	var newd = document.getElementById("mytarget");
	purge(olddiv);
	d.removeChild(olddiv);
//	d.appendChild("hr");
//	alert(dump(newd));
//	var newdiv = document.createElement('div');
//	newdiv.setAttribute('id', "martin");
//	newdiv.innterHTML = "Hello!";
//	newd.appendChild(newdiv);

}
function add()
{
	var d = document.getElementById('roms');
	var myElement = document.createElement("<div id=div_580 class='img'><a href='?action=details&userid=1&romid=580' ><img src='?action=getimg&blobid=4808' width=137 height=200 alt='Click for details'\></a><div class='desc'>42 All-Time Classics</div><div class='rom'>EUR </div><div class='rom' onclick='quickadd(580);return false;' ><a href='void(0)'>Add</a></div><div class='rating' id='rating_580'>3.5</div></div>");
	d.appendChild(myElement);
	document.getElementById("roms").appendChild(d);
}

var oldcol;

function resetcolor()
{
	document.getElementById('free').style.fontWeight="normal";
}

function quickadd(romid)
{
  var cardid = $('[@name="cardid"]').val();
  var userid = $('[@name="userid"]').val();
	$.get("index.php?select[]="+romid,
	   { action: "quickadd", userid: userid, cardid: cardid },
	   function(data){
			document.getElementById('free').innerHTML=data;
//			oldcol = document.getElementById('free').style.backgroundColor;
			document.getElementById('free').style.fontWeight = "bold";
			setTimeout("resetcolor()",300);
			
			
			remove("div_" + romid);
//			add();
			
	   }
	 );
}


function dumpObj(obj, name, indent, depth) {
var MAX_DUMP_DEPTH = 10;

	if (depth > MAX_DUMP_DEPTH) {
		return indent + name + ": <Maximum Depth Reached>\n";
	}
		if (typeof obj == "object") {
		var child = null;
		var output = indent + name + "\n";
		indent += "\t";
		for (var item in obj)
		{
			try {
			child = obj[item];
			} catch (e) {
			child = "<Unable to Evaluate>";
			}
			if (typeof child == "object") {
			output += dumpObj(child, item, indent, depth + 1);
			} else {
			output += indent + item + ": " + child + "\n";
			}
		}
		return output;
	} else
	{
		return obj;
	}
}

function dump(o, level) {
	level = level || 0;
	if(level>dump.maxLevel) return "Too deep";
	if(level || (dbg = document.getElementById('dbg_win'))) {
		var ret = '';

		if(typeof(o) != 'function')
		ret = typeof(o) + ': ';

		if(typeof(o) == 'object') {
			ret+= '\r\n';
			try {
				for(i in o) {
					try {
					ret += "\t".repeat(level) + i + ' => ' + dump(o[i], level+1) + '\r\n';
					} catch(e) {}
				}
			} catch(e) {
			ret = 'can\'t iterate over object';
		}
		} else {
			try {
			ret += o.toString().indent(level, 1);
			} catch(e) {
				ret += 'can\'t convert to string';
			}
		}
		if(level) {
			return ret;
		} else {
			dbg.appendChild(document.createTextNode(ret));
			dbg.appendChild(document.createElement('hr'));
		}
	}
	}

	dump.maxLevel = 4;
	if(!String.prototype.repeat) {
	String.prototype.repeat = function(n) {
	var s=this.toString(), ret='';
	while( (n--) > 0) ret+=s;
	return ret;
	}
	}
	if(!String.prototype.indent) {
		String.prototype.indent = function(level, dontIndentFirst, indentChar) {
			indentChar = indentChar || "\t";
			dontIndentFirst = Number(dontIndentFirst)||0;
			var s = this.toString();
			s = s.split(/^/m);
			for(var i=dontIndentFirst, l=s.length; i<l; i++)
				s[i] = indentChar.repeat(level) + s[i];
			return s.join("");
		}
} 

function purge(d) {
    var a = d.attributes, i, l, n;
    if (a) {
        l = a.length;
        for (i = 0; i < l; i += 1) {
            n = a[i].name;
            if (typeof d[n] === 'function') {
                d[n] = null;
            }
        }
    }
    a = d.childNodes;
    if (a) {
        l = a.length;
        for (i = 0; i < l; i += 1) {
            purge(d.childNodes[i]);
        }
    }
}

function submitform()
{
  document.myform.submit();
}

$(document).ready(jqueryInit);

function cbox(id)
{
if(id.checked == true)
{
alert("if " + id.checked);
id.checked = true;
document.myform.submit();
return true ;
}
else
{
alert("else " + id.checked);
id.checked = false;
document.myform.submit();
return true ;
}
}


